names(Ydataframecol)=toString(HeuristicNames[i])
}
XYCoordinates<-cbind(XYCoordinates,Ydataframecol)
}
print(XYCoordinates)
}
#Now we plot the data
DataFrame<-XYCoordinates
print(DataFrame)
MeltedDataFrame<-melt(DataFrame,id="XCoordinates")
print(MeltedDataFrame)
if(SaveTexImage)
{
tikz(file=paste("/local/pmxtol/Dropbox/",toString(FileName),".tex",sep=""),width=Size[1],height=Size[2])
}
Plot<-ggplot(MeltedDataFrame,aes(x=XCoordinates,y=value,color=variable),show.legend='True') + #geom_point()+
geom_line() +xlab("Percentage Error")+ylab("Frequency Density") + labs(color="Heuristic Type")
if(SaveTexImage)
{
print(Plot)
dev.off()
}
print(Plot)
return(Plot)
}
PlotMultipleHeuristicErrorData(DecodeTestDataPerHeuristic(DataForReport)[c(1,3,5)],100,100,c("PH(1)","PH(2)","PH(3)"),T,OldPlainPenaltyHeuristicOnComplete,c(5,3))
PlotMultipleHeuristicErrorData(DecodeErrorDataPerHeuristic(DataForReport)[c(1,3,5)],100,100,c("PH(1)","PH(2)","PH(3)"),T,OldPlainPenaltyHeuristicOnComplete,c(5,3))
PlotMultipleHeuristicErrorData(DecodeErrorDataPerHeuristic(DataForReport)[c(1,3,5),],100,100,c("PH(1)","PH(2)","PH(3)"),T,OldPlainPenaltyHeuristicOnComplete,c(5,3))
View(DataForReport)
DataForReport2=RunTestForMultipleScenariosCompleteGraphs(500,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(OldPlainIndexForNode,PlainIndexForNode,EqualStepIndexForNode,FlatIndexForNode),500,4,c(1,1,1,1),c(3,3,3,3),c(1,1,1,1),c(1,1,1,1),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
DataForReport2=RunTestForMultipleScenariosCompleteGraphs(500,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(OldPlainIndexForNode,PlainIndexForNode,EqualStepIndexForNode,FlatIndexForNode),500,4,c(1,1,1,1),c(3,3,3,3),c(1,1,1,1),c(1,1,1,1),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
source("Testing Heuristics.R")
library(ggplot2)
library(reshape)
library(tikzDevice)
source("Testing Heuristics.R")
library(ggplot2)
library(reshape)
library(tikzDevice)
DataForReport2=RunTestForMultipleScenariosCompleteGraphs(500,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(OldPlainIndexForNode,PlainIndexForNode,EqualStepIndexForNode,FlatIndexForNode),500,4,c(1,1,1,1),c(3,3,3,3),c(1,1,1,1),c(1,1,1,1),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
View(DataForReport2)
DataForReport3=RunTestForMultipleScenariosLineGraphs(500,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(OldPlainIndexForNode,PlainIndexForNode,EqualStepIndexForNode,FlatIndexForNode),500,4,c(1,1,1,1),c(3,3,3,3),c(1,1,1,1),c(1,1,1,1),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
DecodedReportData2=DecodeErrorDataPerHeuristic(DataForReport2)
DecodedReportData3=DecodeErrorDataPerHeuristic(DataForReport3)
PlotMultipleHeuristicErrorData(DecodedReportData2,100,100)
PlotMultipleHeuristicErrorData(DecodedReportData3,100,100)
View(FullInfo)
View(FullInfo)
source("Testing Heuristics.R")
library(ggplot2)
library(reshape)
library(tikzDevice)
PlotMultipleHeuristicErrorData(DecodedReportData2[1,2,3,4],100,100)
PlotMultipleHeuristicErrorData(DecodedReportData2[c(1,2,3,4),],100,100)
PlotMultipleHeuristicErrorData(DecodedReportData2[c(17,18),],100,100)
PlotMultipleHeuristicErrorData(DecodedReportData3[c(17,18),],100,100)
PlotMultipleHeuristicErrorData(DecodedReportData2[c(25,26),],100,100)
PlotMultipleHeuristicErrorData(DecodedReportData2[c(1,5,9,13,17,21,25,29),],100,100)
PlotMultipleHeuristicErrorData(DecodedReportData2[c(1,5,9,17,21,25),],100,100)
PlotMultipleHeuristicErrorData(DecodedReportData2[c(1,5,9,17,21,25),],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = T,FileName = BHvsPHInitialPlain,size=c(5,3))
PlotMultipleHeuristicErrorData(DecodedReportData2[c(1,5,9,17,21,25),],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = T,FileName = BHvsPHInitialPlain,Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodedReportData2[c(1,5,9,17,21,25),],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = T,FileName = "BHvsPHInitialPlain",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodedReportData2[c(2,6,10,18,22,26),],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = T,FileName = "BHvsPHNewPlainComplete",Size=c(5,3))
for(i in 0:(v-1))
#This index is for use with the no local-observations
PlainIndexForDetCostNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
B=celing(x)
if(s<B)
{
return(0)
}
else if(s==B)
{
return(Cost*Lambda*(B-x))
}
else if(s==B+1)
{
return(Cost*Lambda)
}
}
#This index is for use with the no local-observations
PlainIndexForDetCostNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
B=celing(x)
if(v!=0)
{
print("Error")
}
if(s<B)
{
return(0)
}
else if(s==B)
{
return(Cost*Lambda*(B-x))
}
else if(s==B+1)
{
return(Cost*Lambda)
}
}
CostOfAction<-function(Node,StateVector,NodeMovedTo,n,CostVec,xVec,LambdaVec)
{
BVec=ceiling(xVec)
if(StateVector[Node]==BVec[Node])
{
return(CostVec[Node]*LambdaVec[Node]*(BVec[Node]-xVec[Node]))
}
else if(StateVector[Node]==(BVec[Node]+1))
{
return(CostVec[Node]*LambdaVec[Node])
}
else
{
return(0)
}
}
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,4,c(1,1,1,1),c(3,3,3,3),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
library(gtools)
library(utils)
library(lpSolve)
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,4,c(1,1,1,1),c(3,3,3,3),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
CostOfActionOnNode<-function(Node,StateVector,NodeMovedTo,n,CostVec,xVec,LambdaVec)
{
BVec=ceiling(xVec)
if(StateVector[Node]==BVec[Node])
{
return(CostVec[Node]*LambdaVec[Node]*(BVec[Node]-xVec[Node]))
}
else if(StateVector[Node]==(BVec[Node]+1))
{
return(CostVec[Node]*LambdaVec[Node])
}
else
{
return(0)
}
}
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,4,c(1,1,1,1),c(3,3,3,3),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
CostOfActionOnNode<-function(Node,StateVector,NodeMovedTo,n,CostVec,xVec,LambdaVec)
{
BVec=ceiling(xVec)
if(StateVector[Node]==BVec[Node])
{
return(CostVec[Node]*LambdaVec[Node]*(BVec[Node]-xVec[Node]))
}
else if(StateVector[Node]==(BVec[Node]+1))
{
return(CostVec[Node]*LambdaVec[Node])
}
else
{
return(0)
}
}
CostOfAction<-function(StateVector,NodeMovedTo,n,CostVec,xVec,LambdaVec)
{
Sum=0
for(j in 1:n)
{
Sum=Sum+CostOfActionOnNode(j,StateVector,NodeMovedTo,n,CostVec,xVec,LambdaVec)
}
return(Sum)
}
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,4,c(1,1,1,1),c(3,3,3,3),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
#This index is for use with the no local-observations
PlainIndexForDetCostNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
B=ceiling(x)
if(v!=0)
{
print("Error")
}
if(s<B)
{
return(0)
}
else if(s==B)
{
return(Cost*Lambda*(B-x))
}
else if(s==B+1)
{
return(Cost*Lambda)
}
}
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,4,c(1,1,1,1),c(3,3,3,3),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(10,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,4,c(1,1,1,1),c(3,3,3,3),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(500,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,4,c(1,1,1,1),c(3,3,3,3),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(500,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOld1=RunTestForMultipleScenariosCompleteGraphs(500,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3,4),list(PlainIndexForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DecodeReportDataForDetOnly1=DecodeErrorDataPerHeuristic(DataForReportDetOld1)
PlotMultipleHeuristicErrorData(DecodeReportDataForDetOnly1[c(1,2,3,5,6,7),],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = T,FileName = "OldDeterministicOnly",Size=c(5,3))
library(ggplot2)
library(reshape)
library(tikzDevice)
PlotMultipleHeuristicErrorData(DecodeReportDataForDetOnly1[c(1,2,3,5,6,7),],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = T,FileName = "OldDeterministicOnly",Size=c(5,3))
#This index is for use with the no local-observations
EqualPenaltyIndexForDetCostNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
B=ceiling(x)
if(v!=0)
{
print("Error")
}
if(s <= B)
{
return((Cost*Lambda*(B-x))/B)
}
else if(s==B+1)
{
return(Cost*Lambda)
}
}
#This index is for use with the no local-observations
EqualBenefitIndexForDetCostNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
B=ceiling(x)
if(v!=0)
{
print("Error")
}
if(s <= B)
{
return((s*Cost*Lambda*(B-x))/B)
}
else if(s==B+1)
{
return(Cost*Lambda)
}
}
#This index is for use with the no local-observations
UnequalPenaltyForDetCostNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
B=ceiling(x)
if(v!=0)
{
print("Error")
}
if(s <= B)
{
return((2*s*Cost*Lambda*(B-x))/(B+1))
}
else if(s==B+1)
{
return(Cost*Lambda)
}
}
#This index is for use with the no local-observations
UnequalBenefitIndexForDetCostNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
B=ceiling(x)
if(v!=0)
{
print("Error")
}
if(s <= B)
{
#We must work out the sum of all lesser and equal s
Sum=0
for(i in 1:s)
{
Sum=Sum+((2*i*B)/(B+1))
}
return((Sum*Cost*Lambda*(B-x))/B)
}
else if(s==B+1)
{
return(Cost*Lambda)
}
}
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,4,c(1,1,1,1),c(3,3,3,3),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
library(gtools)
library(utils)
library(lpSolve)
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(1,2,3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,4,c(1,1,1,1),c(3,3,3,3),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,4,c(1,1,1,1),c(3,3,3,3),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,4,c(1,1,1,1),c(4,4,4,4),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,4,c(1,1,1,1),c(4,4,4,4),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,4,c(1,1,1,1),c(4,4,4,4),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,4,c(1,1,1,1),c(4,4,4,4),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,4,c(1,1,1,1),c(5,5,5,5),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,4,c(1,1,1,1),c(5,5,5,5),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
2/3
2\2
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,4,c(1,1,1,1),c(5,5,5,5),c(0,0,0,0),c(0,0,0,0),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
View(DataForReportDetOld1)
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(10,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(10,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode),1000,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(10,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode),1000,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(500,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode),1000,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic=RunTestForMultipleScenariosCompleteGraphs(500,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),1000,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DecodeReportDataForDetWithSplitting1=DecodeErrorDataPerHeuristic(DataForReportDetOldUsingSplitHeuristic)
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(1,2,4)],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = F,FileName = "OldDeterministicOnly",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(1,2,4),],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = F,FileName = "OldDeterministicOnly",Size=c(5,3))
library(ggplot2)
library(reshape)
library(tikzDevice)
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(1,2,4),],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = F,FileName = "OldDeterministicOnly",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(6,8,10),],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = F,FileName = "OldDeterministicOnly",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(1,2,4),],100,100,HeuristicNames = c("Original index","Equal Split","Unequal Split"),SaveTexImage = T,FileName = "BenefitDetSplittingExperiment",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(6,8,10),],100,100,HeuristicNames = c("Original index","Equal Split","Unequal Split"),SaveTexImage = T,FileName = "PenaltyDetSplittingExperiment",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(6,8,10),],100,100,HeuristicNames = c("Original index","Equal Split","Unequal Split"),SaveTexImage = T,FileName = "PenaltyDetSplittingExperiment",Size=c(5,3))
DataForReportDetOldUsingSplitHeuristic2=RunTestForMultipleScenariosCompleteGraphs(500,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(2),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),1000,6,c(1,1,1,1,1,1),c(4,4,4,4,4,4),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportDetOldUsingSplitHeuristic2=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(2),list(PlainIndexForDetCostNode,EqualBenefitIndexForDetCostNode,EqualPenaltyIndexForDetCostNode,UnequalBenefitIndexForDetCostNode,UnequalPenaltyForDetCostNode),1000,6,c(1,1,1,1,1,1),c(4,4,4,4,4,4),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1,100,100,HeuristicNames = c("Original index","Equal Split","Unequal Split"#),SaveTexImage = T,FileName = "PenaltyDetSplittingExperiment",Size=c(5,3))
s
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1,100,100,HeuristicNames = c("Original index","Equal Split","Unequal Split"),SaveTexImage = T,FileName = "PenaltyDetSplittingExperiment",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1,100,100,HeuristicNames = c("Original index","Equal Split","Unequal Split"),SaveTexImage = F,FileName = "PenaltyDetSplittingExperiment",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1,100,100,HeuristicNames = c("Original index","Equal Split","Unequal Split"),SaveTexImage = F,FileName = "PenaltyDetSplittingExperiment",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1,100,100,HeuristicNames = rep("Yes",10),SaveTexImage = F,FileName = "PenaltyDetSplittingExperiment",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(1,2,3)],100,100,HeuristicNames = rep("Yes",10),SaveTexImage = F,FileName = "PenaltyDetSplittingExperiment",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(1,2,3),],100,100,HeuristicNames = rep("Yes",10),SaveTexImage = F,FileName = "PenaltyDetSplittingExperiment",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(1,2,3),],100,100,HeuristicNames = rep("Yes",10),SaveTexImage = F,FileName = "PenaltyDetSplittingExperiment",Size=c(5,3))
View(DecodeReportDataForDetWithSplitting1)
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(1),],100,100,HeuristicNames = rep("Yes",10),SaveTexImage = F,FileName = "PenaltyDetSplittingExperiment",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(1,2),],100,100,HeuristicNames = rep("Yes",10),SaveTexImage = F,FileName = "PenaltyDetSplittingExperiment",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(1,2,4),],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = F,FileName = "OldDeterministicOnly",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(1,2,3,4,5),],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = F,FileName = "OldDeterministicOnly",Size=c(5,3))
PlotMultipleHeuristicErrorData(DecodeReportDataForDetWithSplitting1[c(1,2,3,4,5,6,7,8,9,10),],100,100,HeuristicNames = c("BH($1$)","BH($2$)","BH($3$)","PH($1$)","PH($2$)","PH($3$)"),SaveTexImage = F,FileName = "OldDeterministicOnly",Size=c(5,3))
integrate(4)
integrate(x)
integrate(function(x){return(x)},1,2)
#Instantly moving det cost
CostOfActionOnNode<-function(Node,StateVector,NodeMovedTo,n,CostVec,xVec,LambdaVec)
{
BVec=ceiling(xVec)
if(Node==NodeMovedTo)
{
return(0)
}
else if(StateVector[Node]==BVec[Node])
{
return(CostVec[Node] * LambdaVec[Node] * (BVec[Node]-xVec[Node]))
}
else if(StateVector[Node]==(BVec[Node]+1))
{
return(CostVec[Node] * LambdaVec[Node])
}
}
#This index is for use with no local observations and instaneous movement
PlainIndexForInstantlyMoving<-function(s,v,Cost,Lambda,b,x,vMax)
{
B=ceiling(x)
if(v!=0)
{
print("Error")
}
if(s < B)
{
return(0)
}
else if(s = B)
{
return((B*Cost*Lambda*(B-x)))
}
else if(s==B+1)
{
return((1+x)*Cost*Lambda)
}
}
#Instantly moving det cost
CostOfActionOnNode<-function(Node,StateVector,NodeMovedTo,n,CostVec,xVec,LambdaVec)
{
BVec=ceiling(xVec)
if(Node==NodeMovedTo)
{
return(0)
}
else if(StateVector[Node]==BVec[Node])
{
return(CostVec[Node] * LambdaVec[Node] * (BVec[Node]-xVec[Node]))
}
else if(StateVector[Node]==(BVec[Node]+1))
{
return(CostVec[Node] * LambdaVec[Node])
}
}
#This index is for use with no local observations and instaneous movement
PlainIndexForInstantlyMovingDet<-function(s,v,Cost,Lambda,b,x,vMax)
{
B=ceiling(x)
if(v!=0)
{
print("Error")
}
if(s < B)
{
return(0)
}
else if(s = B)
{
return((B*Cost*Lambda*(B-x)))
}
else if(s==B+1)
{
return((1+x)*Cost*Lambda)
}
}
#This index is for use with no local observations and instaneous movement
PlainIndexForInstantlyMovingDet<-function(s,v,Cost,Lambda,b,x,vMax)
{
B=ceiling(x)
if(v!=0)
{
print("Error")
}
if(s < B)
{
return(0)
}
else if(s = B)
{
return((B*Cost*Lambda*(B-x)))
}
else if(s==B+1)
{
return((1+x)*Cost*Lambda)
}
}
#This index is for use with no local observations and instaneous movement
PlainIndexForInstantlyMovingDet<-function(s,v,Cost,Lambda,b,x,vMax)
{
B=ceiling(x)
if(v!=0)
{
print("Error")
}
if(s < B)
{
return(0)
}
else if(s == B)
{
return(B*Cost*Lambda*(B-x))
}
else if(s==B+1)
{
return((1+x)*Cost*Lambda)
}
}
DataForReportInstantlyMovingDet=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(2),list(PlainIndexForInstantlyMovingDet),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
library(gtools)
library(utils)
library(lpSolve)
DataForReportInstantlyMovingDet=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(2),list(PlainIndexForInstantlyMovingDet),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
#Instantly moving det cost
CostOfActionOnNode<-function(Node,StateVector,NodeMovedTo,n,CostVec,xVec,LambdaVec)
{
BVec=ceiling(xVec)
if(Node==NodeMovedTo)
{
return(0)
}
else if(StateVector[Node]==BVec[Node])
{
return(CostVec[Node] * LambdaVec[Node] * (BVec[Node]-xVec[Node]))
}
else if(StateVector[Node]==(BVec[Node]+1))
{
return(CostVec[Node] * LambdaVec[Node])
}
}
#Total action cost
CostOfAction<-function(StateVector,NodeMovedTo,n,CostVec,xVec,LambdaVec)
{
Sum=0
for(j in 1:n)
{
Sum=Sum+CostOfActionOnNode(j,StateVector,NodeMovedTo,n,CostVec,xVec,LambdaVec)
}
return(Sum)
}
DataForReportInstantlyMovingDet=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(2),list(PlainIndexForInstantlyMovingDet),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
#Instantly moving det cost
CostOfActionOnNode<-function(Node,StateVector,NodeMovedTo,n,CostVec,xVec,LambdaVec)
{
BVec=ceiling(xVec)
if(Node==NodeMovedTo)
{
return(0)
}
else if(StateVector[Node] < BVec[Node])
{
return(0)
}
else if(StateVector[Node]==BVec[Node])
{
return(CostVec[Node] * LambdaVec[Node] * (BVec[Node]-xVec[Node]))
}
else if(StateVector[Node]==(BVec[Node]+1))
{
return(CostVec[Node] * LambdaVec[Node])
}
}
DataForReportInstantlyMovingDet=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(2),list(PlainIndexForInstantlyMovingDet),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportInstantlyMovingDet=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(2),list(PlainIndexForInstantlyMovingDet),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportInstantlyMovingDet=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(2),list(PlainIndexForInstantlyMovingDet),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportInstantlyMovingDet=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(2),list(PlainIndexForInstantlyMovingDet),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportInstantlyMovingDet=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForInstantlyMovingDet),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
DataForReportInstantlyMovingDet=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepBenefitHeuristic,MultiStepPenaltyHeuristic),c(3),list(PlainIndexForInstantlyMovingDet),500,6,c(1,1,1,1,1,1),c(3,3,3,3,3,3),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(0,0,0,0,0,0),c(1,1,1,1,1,1),c(1,1,1,1,1,1),c(1,1,1,1,1,1))
