PenaltyForPath=c(PenaltyForPath,OldPenaltyForPath[row]+PenaltyForAction[action])
}
}
}
#Identify the maximal elements
MinimalElements=which(PenaltyForPath==min(PenaltyForPath))
#We now choose one at random
ChosenMin=MinimalElements[sample(1:length(MinimalElements),1)]
BestPath=Paths[ChosenMin,]
BestPathforStep[Step,]=BestPath
}
}
#For each look ahead step we have a path
#print(BestPathforStep)
AverageCostforPath=vector(length=NoSteps)
#We now need to see how good they perform
for(i in 1:NoSteps)
{
#We compute the average cost of following such a strategy to decide which paths to pick
#We use determinsitic evolution to the mean state in v
AverageCostforPath[i]=DeterministicCostEvaluationOfPath(BestPathforStep[i,],n,sVec,vVec,CostVec,LambdaVec,bVec,xVec,vMaxVec)$Average
}
#print(AverageCostforPath)
#Identify the maximal elements
MinimalElements=which(AverageCostforPath==min(AverageCostforPath))
#We now choose one at random
ChosenMin=MinimalElements[sample(1:length(MinimalElements),1)]
OverallBestPath=BestPathforStep[ChosenMin,]
return(OverallBestPath[1])
}
SimulationForEvolution(2,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(2,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(2,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(2,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.5,3),rep(1,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.5,3),rep(1,3),rep(1,3),rep(1/3,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,c(1.6,2.1,1.2),c(1,2,1),rep(1,3),rep(1/3,3))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),c(1,2,),c(1.6,2.1,1.2))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),c(1,2,1),c(1.6,2.1,1.2))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,c(1.6,2.1,1.2),c(1,2,1),rep(1,3),rep(1/3,3))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),c(1,2,1),c(1.6,2.1,1.2))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,c(1.6,2.1,1.2),c(1,2,1),rep(1,3),rep(1/3,3))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),c(1,2,1),c(1.6,2.1,1.2))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),EqualStepIndexForNode,rep(1,3),rep(1/3,3),c(1,2,1),c(1.6,2.1,1.2))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),EqualStepIndexForNode,rep(1,3),rep(1/3,3),c(1,2,1),c(1.6,2.1,1.2))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),EqualStepIndexForNode,rep(1,3),rep(1/3,3),c(1,2,1),c(1.6,2.1,1.2))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),c(1,2,1),c(1.6,2.1,1.2))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),c(1,2,1),c(1.6,2.1,1.2))
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),c(1,2,1),c(1.6,2.1,1.2))
View(EqualStepIndexForNode)
View(EqualStepIndexForNode)
View(EqualStepIndexForNode)
SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.5,3),rep(0,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(1000,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.1,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.1,3),rep(0,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.1,3))
SimulationForEvolution(3,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(3,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
FindVMax<-function(Lambda,b,x)
{
#First calculate B and the remainder
B=ceiling(x)
R=B-x
CurrentMax=-1
for(v in 0:(b+1))
{
if(v <= (Lambda * R))
{
CurrentMax=v
}
else
{
return(CurrentMax)
}
}
return(CurrentMax)
}
SimulationForEvolution(3,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
FindVMax<-function(Lambda,b,x)
{
#First calculate B and the remainder
B=ceiling(x)
R=B-x
CurrentMax=-1
for(v in 0:(b+1))
{
if(v <= (Lambda * (1-R))
{
CurrentMax=v
}
else
{
return(CurrentMax)
}
}
return(CurrentMax)
}
source("Optimal solution by LP.R")
FindVMax<-function(Lambda,b,x)
{
#First calculate B and the remainder
B=ceiling(x)
R=B-x
CurrentMax=-1
for(v in 0:(b+1))
{
if(v <= (Lambda * (1-R)))
{
CurrentMax=v
}
else
{
return(CurrentMax)
}
}
return(CurrentMax)
}
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
Delta<-function(tilde=FALSE,CostAtNode,Lambda,b,x,v,vMax)
{
#First calculate B and the remainder
B=ceiling(x)
R=B-x
if(tilde==FALSE)
{
#Calculate Sum
Sum=Lambda * R * (B+1)
Sum=Sum + (v * (B+1-TruncPoissonHazard(Lambda,b,v)))
if(v>0)
{
for(i in 0:(v-1))
{
Sum=Sum- (i * TruncPoissonPMF(Lambda,b,i))
}
}
Sum=CostAtNode * Sum
print("This is delta")
print(Sum)
return (Sum)
}
if(tilde==TRUE)
{
#Now calculate sum
Sum= Lambda * (B+1 + (R-1)*TruncPoissonHazard(Lambda,b,v))
if(v>0)
{
for(i in 0:(v-1))
{
Sum=Sum- (i * TruncPoissonPMF(Lambda,b,i))
}
}
Sum=CostAtNode * Sum
return(Sum)
}
}
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.1,3),rep(0,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.1,3),rep(1,3),rep(1,3),rep(1/3,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.1,3),rep(1,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(30,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.5,3),rep(1,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.9,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.9,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.5,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.9,3),rep(1,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.9,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.9,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.9,3),rep(1,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.9,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.9,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.9,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.9,3),rep(0,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.9,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.5,3),rep(0,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
PlainIndexForNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
#First calculate B
B=ceiling(x)
if(s < B)
{
return(0)
}
else if(s==B && v < vMax)
{
return(Delta(tilde = FALSE,Cost,Lambda,b,x,v,vMax))
}
else if(s==B && v >= vMax)
{
return(Delta(tilde = TRUE,Cost,Lambda,b,x,v,vMax))
}
else
{
return(Cost * Lambda)
}
}
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
PlainIndexForNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
#First calculate B
B=ceiling(x)
if(s < B)
{
return(0)
}
else if(s==B && v < vMax)
{
return(Delta(tilde = FALSE,Cost,Lambda,b,x,v,vMax))
}
else if(s==B && v >= vMax)
{
return(Delta(tilde = TRUE,Cost,Lambda,b,x,v,vMax))
}
else
{
return(Delta(tilde = TRUE,Cost,Lambda,b,x,v,vMax))
}
}
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
Delta<-function(tilde=FALSE,CostAtNode,Lambda,b,x,v,vMax)
{
#First calculate B and the remainder
B=ceiling(x)
R=B-x
if(tilde==FALSE)
{
#Calculate Sum
Sum=Lambda * R * (B+1)
Sum=Sum + (v * (B+1-TruncPoissonHazard(Lambda,b,v)))
if(v>0)
{
for(i in 0:(v-1))
{
Sum=Sum- (i * TruncPoissonPMF(Lambda,b,i))
}
}
Sum=CostAtNode * Sum
print("This is delta")
print(Sum)
return (Sum)
}
if(tilde==TRUE)
{
#Now calculate sum
Sum= Lambda * (B+1 + (1-R)*TruncPoissonCDF(Lambda,b,v-1))
if(v>0)
{
for(i in 0:(v-1))
{
Sum=Sum- (i * TruncPoissonPMF(Lambda,b,i))
}
}
Sum=CostAtNode * Sum
return(Sum)
}
}
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
Delta<-function(tilde=FALSE,CostAtNode,Lambda,b,x,v,vMax)
{
#First calculate B and the remainder
B=ceiling(x)
R=B-x
if(tilde==FALSE)
{
#Calculate Sum
Sum=Lambda * R * (B+1)
Sum=Sum + (v * (B+1-TruncPoissonHazard(Lambda,b,v)))
if(v>0)
{
for(i in 0:(v-1))
{
Sum=Sum- (i * TruncPoissonPMF(Lambda,b,i))
}
}
Sum=CostAtNode * Sum
print("This is delta")
print(Sum)
return (Sum)
}
if(tilde==TRUE)
{
#Now calculate sum
Sum= Lambda * (B+1 + (1-R)*TruncPoissionCDF(Lambda,b,v-1))
if(v>0)
{
for(i in 0:(v-1))
{
Sum=Sum- (i * TruncPoissonPMF(Lambda,b,i))
}
}
Sum=CostAtNode * Sum
return(Sum)
}
}
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.5,3),rep(0,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.5,3),rep(0,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
Delta<-function(tilde=FALSE,CostAtNode,Lambda,b,x,v,vMax)
{
#First calculate B and the remainder
B=ceiling(x)
R=B-x
if(tilde==FALSE)
{
#Calculate Sum
Sum=Lambda * R * (B+1)
Sum=Sum + (v * (B+1-TruncPoissonHazard(Lambda,b,v)))
if(v>0)
{
for(i in 0:(v-1))
{
Sum=Sum- (i * TruncPoissonPMF(Lambda,b,i))
}
}
Sum=CostAtNode * Sum
print("This is delta")
print(Sum)
return (Sum)
}
if(tilde==TRUE)
{
#Now calculate sum
Sum= Lambda * (B + (1-R)*TruncPoissionCDF(Lambda,b,v-1))
if(v>0)
{
for(i in 0:(v-1))
{
Sum=Sum- (i * TruncPoissonPMF(Lambda,b,i))
}
}
Sum=CostAtNode * Sum
return(Sum)
}
}
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
Delta<-function(tilde=FALSE,CostAtNode,Lambda,b,x,v,vMax)
{
#First calculate B and the remainder
B=ceiling(x)
R=B-x
if(tilde==FALSE)
{
#Calculate Sum
Sum=Lambda * R * (B+1)
Sum=Sum + (v * (B+1-TruncPoissonHazard(Lambda,b,v)))
if(v>0)
{
for(i in 0:(v-1))
{
Sum=Sum- (i * TruncPoissonPMF(Lambda,b,i))
}
}
Sum=CostAtNode * Sum
print("This is delta")
print(Sum)
return (Sum)
}
if(tilde==TRUE)
{
#Now calculate sum
Sum= Lambda * (B + 1 - R + (R-1)*TruncPoissionCDF(Lambda,b,v-1))
if(v>0)
{
for(i in 0:(v-1))
{
Sum=Sum- (i * TruncPoissonPMF(Lambda,b,i))
}
}
Sum=CostAtNode * Sum
return(Sum)
}
}
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(40,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(400,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
Delta<-function(tilde=FALSE,CostAtNode,Lambda,b,x,v,vMax)
{
#First calculate B and the remainder
B=ceiling(x)
R=B-x
if(tilde==FALSE)
{
#Calculate Sum
Sum=Lambda * R * B
Sum=Sum + (v * (B+1-TruncPoissonHazard(Lambda,b,v)))
if(v>0)
{
for(i in 0:(v-1))
{
Sum=Sum- (i * TruncPoissonPMF(Lambda,b,i))
}
}
Sum=CostAtNode * Sum
print("This is delta")
print(Sum)
return (Sum)
}
if(tilde==TRUE)
{
#Now calculate sum
Sum= Lambda * (B + 1 - R + (R-1)*TruncPoissionCDF(Lambda,b,vMax))
if(vMax>0)
{
for(i in 0:(vMax-1))
{
Sum=Sum- (i * TruncPoissonPMF(Lambda,b,i))
}
}
Sum=CostAtNode * Sum
return(Sum)
}
}
PlainIndexForNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
#First calculate B
B=ceiling(x)
if(s < B)
{
return(0)
}
else if(s==B && v < vMax)
{
return(Delta(tilde = FALSE,Cost,Lambda,b,x,v,vMax))
}
else if(s==B && v >= vMax)
{
return(Delta(tilde = TRUE,Cost,Lambda,b,x,v,vMax))
}
else
{
return(Delta(tilde = TRUE,Cost,Lambda,b,x,v,vMax))
}
}
SimulationForEvolution(400,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
SimulationForEvolution(4,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.5,3))
