}
IndicesForNodes<-function(n,IndexForNodeFunction,sVec,vVec,CostVec,LambdaVec,bVec,xVec,vMaxVec=NULL)
{
if(is.null(vMaxVec))
{
#Create vMaxVec
vMaxVec=CreateVMaxVector(n,LambdaVec,bVec,xVec)
}
#Now for each node we find its index
Indices=vector(length=n)
for(i in 1:n)
{
Indices[i]=IndexForNodeFunction(sVec[i],vVec[i],CostVec[i],LambdaVec[i],bVec[i],xVec[i],vMaxVec[i])
}
return(Indices)
}
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,)
sd
sd
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
WaitingIndexForNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
if(s==1 && v==1)
{
return(10)
}
else if(s==1)
{
return(1)
}
else
{
return(0)
}
}
IndicesForNodes<-function(n,IndexForNodeFunction,sVec,vVec,CostVec,LambdaVec,bVec,xVec,vMaxVec=NULL)
{
if(is.null(vMaxVec))
{
#Create vMaxVec
vMaxVec=CreateVMaxVector(n,LambdaVec,bVec,xVec)
}
#Now for each node we find its index
Indices=vector(length=n)
for(i in 1:n)
{
Indices[i]=IndexForNodeFunction(sVec[i],vVec[i],CostVec[i],LambdaVec[i],bVec[i],xVec[i],vMaxVec[i])
}
return(Indices)
}
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
WaitingIndexForNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
if(s==1 && v==1)
{
return(2)
}
else if(s==1)
{
return(1)
}
else
{
return(0)
}
}
IndicesForNodes<-function(n,IndexForNodeFunction,sVec,vVec,CostVec,LambdaVec,bVec,xVec,vMaxVec=NULL)
{
if(is.null(vMaxVec))
{
#Create vMaxVec
vMaxVec=CreateVMaxVector(n,LambdaVec,bVec,xVec)
}
#Now for each node we find its index
Indices=vector(length=n)
for(i in 1:n)
{
Indices[i]=IndexForNodeFunction(sVec[i],vVec[i],CostVec[i],LambdaVec[i],bVec[i],xVec[i],vMaxVec[i])
}
return(Indices)
}
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
WaitingIndexForNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
if(s==1 && v==1)
{
return(2)
}
else if(s==1)
{
return(1)
}
else
{
return(0)
}
}
IndicesForNodes<-function(n,IndexForNodeFunction,sVec,vVec,CostVec,LambdaVec,bVec,xVec,vMaxVec=NULL)
{
if(is.null(vMaxVec))
{
#Create vMaxVec
vMaxVec=CreateVMaxVector(n,LambdaVec,bVec,xVec)
}
#Now for each node we find its index
Indices=vector(length=n)
for(i in 1:n)
{
Indices[i]=IndexForNodeFunction(sVec[i],vVec[i],CostVec[i],LambdaVec[i],bVec[i],xVec[i],vMaxVec[i])
}
return(Indices)
}
WaitingIndexForNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
if(s==1 && v==1)
{
return(2)
}
else if(s==1)
{
return(1)
}
else
{
return(0)
}
}
IndicesForNodes<-function(n,IndexForNodeFunction,sVec,vVec,CostVec,LambdaVec,bVec,xVec,vMaxVec=NULL)
{
if(is.null(vMaxVec))
{
#Create vMaxVec
vMaxVec=CreateVMaxVector(n,LambdaVec,bVec,xVec)
}
#Now for each node we find its index
Indices=vector(length=n)
for(i in 1:n)
{
Indices[i]=IndexForNodeFunction(sVec[i],vVec[i],CostVec[i],LambdaVec[i],bVec[i],xVec[i],vMaxVec[i])
}
return(Indices)
}
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
WaitingIndexForNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
if(s==1 && v==1)
{
return(2)
}
else
{
return(0)
}
}
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SolveLP(matrix(rep(1,4),nrow=2,ncol=2),2,rep(1.99,2),rep(1,2),rep(1,2),rep(0.5,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SolveLP(matrix(rep(1,4),nrow=2,ncol=2),2,rep(1.99,2),rep(1,2),rep(1,2),rep(0.5,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,5,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,5,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.99,2))
SimulationForEvolution(100,5,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(100,5,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(100,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(1,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),WaitingIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),RandomIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(100,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(100,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.9,2))
SimulationForEvolution(100,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(100,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(1,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(100,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(1,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(100,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(1,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(100,1,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(1,2),rep(1,2),rep(1.1,2))
SolveLP(matrix(rep(1,4),nrow=2,ncol=2),2,rep(1.99,2),rep(1,2),rep(1,2),rep(1,2))
SolveLP(matrix(rep(1,4),nrow=2,ncol=2),2,rep(1.1,2),rep(1,2),rep(1,2),rep(1,2))
SimulationForEvolution(100,2,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(1,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(1,2),rep(1,2),rep(1.1,2))
SimulateVStateEvolution<-function(NodeToEvolve,NewsVec,vVec,xVec,LambdaVec,bVec)
{
BVec=ceiling(xVec)
NewvVec=(NewVState(vVec,NewsVec,NodeToEvolve,BVec,bVec,LambdaVec)$State)[1,]
NewvVec[NodeToEvolve]=min(bVec[NodeToEvolve],rpois(1,LambdaVec[NodeToEvolve]))
return(NewvVec)
}
SimulationForEvolution<-function(NumberOfRunSteps,HeuristicDepth,HeuristicFunction,n,AdjacencyMatrix,IndexForNodeFunction,CostVec,LambdaVec,bVec,xVec,vMaxVec=NULL)
{
BVec=ceiling(xVec)
if(is.null(vMaxVec))
{
#Create vMaxVec
vMaxVec=CreateVMaxVector(n,LambdaVec,bVec,xVec)
}
RunCost=vector(length=NumberOfRunSteps)
for(run in 0:NumberOfRunSteps)
{
print(paste("On run ",toString(run)))
if(run==0)
{
#Set up initial States
StartNode=StartingNodeHeuristic(n,IndexForNodeFunction,CostVec,LambdaVec,bVec,xVec,vMaxVec)
print(paste("Starting at ",toString(StartNode)))
sVec=BVec+1
sVec[StartNode]=1
print("Current S is ")
print(sVec)
vVec=vector(length=n)
for(i in 1:n)
{
if(i==StartNode)
{
vVec[i]=TruncPoissionMean(LambdaVec[i],bVec[i])
print(paste("I have just set the V to",toString(vVec[i]),"Using lam=",toString(LambdaVec[i])," and b=",toString(bVec[i])))
}
else
{
vVec[i]=0
}
}
print("Current v is")
print(vVec)
}
else
{
#Perform a run
OldsVec=sVec
OldvVec=vVec
print("Current S is ")
print(OldsVec)
print("Current V is ")
print(OldvVec)
#decide where to move to using heuristic
MoveToNode=HeuristicFunction(HeuristicDepth,n,AdjacencyMatrix,IndexForNodeFunction,OldsVec,OldvVec,CostVec,LambdaVec,bVec,xVec,vMaxVec)
print(paste("Choosing to move to",toString(MoveToNode)))
#Calculate cost of doing such an action
RunCost[run]=CostOfAction(c(OldsVec,OldvVec),MoveToNode,n,CostVec,xVec,LambdaVec)
print(paste("Cost of action is",toString(RunCost[run])))
#Evolve System
sVec=NewSState(OldsVec,MoveToNode,BVec)
print("Evolved S is ")
print(sVec)
#vVec=SimulateVStateEvolution(MoveToNode,sVec,OldvVec,xVec,LambdaVec,bVec)
vVec=NewMeanVState(OldvVec,sVec,MoveToNode,BVec,bVec,LambdaVec)
print("Evolved v is")
print(vVec)
print(paste("Moved to ",toString(MoveToNode),"Costing ",toString(RunCost[run])))
}
}
AverageCost=sum(RunCost)/NumberOfRunSteps
print(paste("Average cost is ",toString(AverageCost)))
return(list(Average=AverageCost,CostForStep=RunCost))
}
SimulationExperiment<-function(NumberOfTrials,NumberOfRunSteps,HeuristicDepth,HeuristicFunction,n,AdjacencyMatrix,IndexForNodeFunction,CostVec,LambdaVec,bVec,xVec,vMaxVec=NULL)
{
#We repeat the simulation
RunningCostMatrix=matrix(0,nrow = 0,ncol=NumberOfRunSteps)
AveragecostVec=vector(length=NumberOfTrials)
for(trial in 1:NumberOfTrials)
{
Simulation=SimulationForEvolution(NumberOfRunSteps,HeuristicDepth,HeuristicFunction,n,AdjacencyMatrix,IndexForNodeFunction,CostVec,LambdaVec,bVec,xVec)
RunningCostMatrix=rbind(RunningCostMatrix,Simulation$CostForStep)
AveragecostVec[trial]=Simulation$Average
#print(RunningCostMatrix)
}
AverageAmongSimulations=sum(AveragecostVec)/NumberOfTrials
return(AverageAmongSimulations)
}
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(1,2),rep(1,2),rep(1.1,2))
SimulateVStateEvolution<-function(NodeToEvolve,NewsVec,vVec,xVec,LambdaVec,bVec)
{
BVec=ceiling(xVec)
NewvVec=(NewVState(vVec,NewsVec,NodeToEvolve,BVec,bVec,LambdaVec)$State)[1,]
NewvVec[NodeToEvolve]=min(bVec[NodeToEvolve],rpois(1,LambdaVec[NodeToEvolve]))
return(NewvVec)
}
SimulationForEvolution<-function(NumberOfRunSteps,HeuristicDepth,HeuristicFunction,n,AdjacencyMatrix,IndexForNodeFunction,CostVec,LambdaVec,bVec,xVec,vMaxVec=NULL)
{
BVec=ceiling(xVec)
if(is.null(vMaxVec))
{
#Create vMaxVec
vMaxVec=CreateVMaxVector(n,LambdaVec,bVec,xVec)
}
RunCost=vector(length=NumberOfRunSteps)
for(run in 0:NumberOfRunSteps)
{
print(paste("On run ",toString(run)))
if(run==0)
{
#Set up initial States
StartNode=StartingNodeHeuristic(n,IndexForNodeFunction,CostVec,LambdaVec,bVec,xVec,vMaxVec)
print(paste("Starting at ",toString(StartNode)))
sVec=BVec+1
sVec[StartNode]=1
print("Current S is ")
print(sVec)
vVec=vector(length=n)
for(i in 1:n)
{
if(i==StartNode)
{
vVec[i]=TruncPoissionMean(LambdaVec[i],bVec[i])
print(paste("I have just set the V to",toString(vVec[i]),"Using lam=",toString(LambdaVec[i])," and b=",toString(bVec[i])))
}
else
{
vVec[i]=0
}
}
print("Current v is")
print(vVec)
}
else
{
#Perform a run
OldsVec=sVec
OldvVec=vVec
print("Current S is ")
print(OldsVec)
print("Current V is ")
print(OldvVec)
#decide where to move to using heuristic
MoveToNode=HeuristicFunction(HeuristicDepth,n,AdjacencyMatrix,IndexForNodeFunction,OldsVec,OldvVec,CostVec,LambdaVec,bVec,xVec,vMaxVec)
print(paste("Choosing to move to",toString(MoveToNode)))
#Calculate cost of doing such an action
RunCost[run]=CostOfAction(c(OldsVec,OldvVec),MoveToNode,n,CostVec,xVec,LambdaVec)
print(paste("Cost of action is",toString(RunCost[run])))
#Evolve System
sVec=NewSState(OldsVec,MoveToNode,BVec)
print("Evolved S is ")
print(sVec)
vVec=SimulateVStateEvolution(MoveToNode,sVec,OldvVec,xVec,LambdaVec,bVec)
#vVec=NewMeanVState(OldvVec,sVec,MoveToNode,BVec,bVec,LambdaVec)
print("Evolved v is")
print(vVec)
print(paste("Moved to ",toString(MoveToNode),"Costing ",toString(RunCost[run])))
}
}
AverageCost=sum(RunCost)/NumberOfRunSteps
print(paste("Average cost is ",toString(AverageCost)))
return(list(Average=AverageCost,CostForStep=RunCost))
}
SimulationExperiment<-function(NumberOfTrials,NumberOfRunSteps,HeuristicDepth,HeuristicFunction,n,AdjacencyMatrix,IndexForNodeFunction,CostVec,LambdaVec,bVec,xVec,vMaxVec=NULL)
{
#We repeat the simulation
RunningCostMatrix=matrix(0,nrow = 0,ncol=NumberOfRunSteps)
AveragecostVec=vector(length=NumberOfTrials)
for(trial in 1:NumberOfTrials)
{
Simulation=SimulationForEvolution(NumberOfRunSteps,HeuristicDepth,HeuristicFunction,n,AdjacencyMatrix,IndexForNodeFunction,CostVec,LambdaVec,bVec,xVec)
RunningCostMatrix=rbind(RunningCostMatrix,Simulation$CostForStep)
AveragecostVec[trial]=Simulation$Average
#print(RunningCostMatrix)
}
AverageAmongSimulations=sum(AveragecostVec)/NumberOfTrials
return(AverageAmongSimulations)
}
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(1,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(1,2),rep(4,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(4,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(1,2),rep(4,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(4,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(4,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(4,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(4,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(4,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(4,2),rep(1.1,2))
SolveLP(matrix(rep(1,4),nrow=2,ncol=2),2,rep(1.1,2),rep(4,2),rep(1,2),rep(1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(4,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(4,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(4,2),rep(1.1,2))
SolveLP(matrix(rep(1,4),nrow=2,ncol=2),2,rep(1.1,2),rep(4,2),rep(1,2),rep(0.5,2))
SolveLP(matrix(rep(1,4),nrow=2,ncol=2),2,rep(1.1,2),rep(4,2),rep(1,2),rep(0.5,2))
SolveLP(matrix(rep(1,4),nrow=2,ncol=2),2,rep(1.1,2),rep(4,2),rep(1,2),rep(0.5,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(4,2),rep(1.1,2))
SolveLP(matrix(rep(1,4),nrow=2,ncol=2),2,rep(1.1,2),rep(6,2),rep(1,2),rep(0.5,2))
SolveLP(matrix(rep(1,4),nrow=2,ncol=2),2,rep(1.1,2),rep(7,2),rep(1,2),rep(0.5,2))
SolveLP(matrix(rep(1,4),nrow=2,ncol=2),2,rep(1.1,2),rep(8,2),rep(1,2),rep(0.5,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(8,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(8,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(8,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(8,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(8,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(8,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(8,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(8,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(8,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(8,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(8,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(8,2),rep(1.1,2))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.1,3),rep(0,3),rep(1,3),rep(0.5,2))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.1,3),rep(0,3),rep(1,3),rep(0.5,2))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.1,3),rep(0,3),rep(1,3),rep(0.5,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.1,3),rep(0,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(0,3),rep(1.1,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SolveLP(matrix(rep(1,9),nrow=3,ncol=3),3,rep(1.1,3),rep(1,3),rep(1,3),rep(1/3,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3,ncol=3,byrow=TRUE),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(1,3),rep(1.1,3))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(1.1,4),rep(1,4),rep(1,4),rep(1/4,4))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),EqualStepIndexForNode,rep(1,4),rep(1/4,4),rep(1,4),rep(1.1,4))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),EqualStepIndexForNode,rep(1,4),rep(1/4,4),rep(1,4),rep(1.1,4))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),EqualStepIndexForNode,rep(1,4),rep(1/4,4),rep(1,4),rep(1.1,4))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),EqualStepIndexForNode,rep(1,4),rep(1/4,4),rep(1,4),rep(1.1,4))
SimulationExperiment(10,100,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),EqualStepIndexForNode,rep(1,4),rep(1/4,4),rep(1,4),rep(1.1,4))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),EqualStepIndexForNode,rep(1,4),rep(1/4,4),rep(1,4),rep(1.1,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(3.1,4),rep(1,4),rep(1,4),rep(1/4,4))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),EqualStepIndexForNode,rep(1,4),rep(1/4,4),rep(1,4),rep(3.1,4))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),IncreasingStepIndexForNode,rep(1,4),rep(1/4,4),rep(1,4),rep(3.1,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(3.1,4),rep(1,4),rep(1,4),rep(1/4,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(1.1,4),rep(1,4),rep(1,4),rep(1,4))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),IncreasingStepIndexForNode,rep(1,4),rep(1,4),rep(1,4),rep(1.1,4))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),IncreasingStepIndexForNode,rep(1,4),rep(3,4),rep(1,4),rep(1.1,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(1.1,4),rep(1,4),rep(1,4),rep(3,4))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),IncreasingStepIndexForNode,rep(1,4),rep(3,4),rep(1,4),rep(1.1,4))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),IncreasingStepIndexForNode,rep(1,4),rep(10,4),rep(1,4),rep(1.1,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(1.1,4),rep(1,4),rep(1,4),rep(10,4))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),IncreasingStepIndexForNode,rep(1,4),rep(10,4),rep(1,4),rep(1.1,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(1.1,4),rep(1,4),rep(1,4),rep(10,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(1.1,4),rep(3,4),rep(1,4),rep(10,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(1.1,4),rep(2,4),rep(1,4),rep(10,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(1.1,4),rep(1,4),rep(1,4),rep(10,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(1.1,4),rep(2,4),rep(1,4),rep(10,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(1.1,4),rep(2,4),rep(1,4),rep(1,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,rep(1.1,4),rep(2,4),rep(1,4),rep(1,4))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),IncreasingStepIndexForNode,rep(1,4),rep(1,4),rep(2,4),rep(1.1,4))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),IncreasingStepIndexForNode,rep(1,4),rep(1,4),c(1,2,2,1),c(1.1,2.3,3.5,4.5))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,c(1,2,2,1),c(1.1,2.3,3.5,4.5),rep(1,4),rep(1,4))
SimulationForEvolution(1000,3,MultiStepBenefitHeuristic,4,matrix(rep(1,16),nrow=4,ncol=4,byrow=TRUE),IncreasingStepIndexForNode,rep(1,4),rep(1,4),c(1,2,2,1),c(1.1,2.3,3.5,4.5))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,c(1,2,2,1),c(1.1,2.3,3.5,4.5),rep(1,4),rep(1,4))
SolveLP(matrix(rep(1,16),nrow=4,ncol=4),4,c(1,2,2,1),c(1.1,2.3,3.5,4.5),rep(1,4),rep(1,4))
SolveLP(matrix(rep(1,4),nrow=2,ncol=2),2,rep(1.1,2),rep(0,2),rep(1,2),rep(0.5,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(100,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(0,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(2.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
SimulationForEvolution(10,3,MultiStepBenefitHeuristic,2,matrix(rep(1,4),nrow=2,ncol=2,byrow=TRUE),EqualStepIndexForNode,rep(1,2),rep(0.5,2),rep(1,2),rep(1.1,2))
