for(i in 1:NumNodes)
{
AdjacencyMatrix[i,i]=1
}
return(AdjacencyMatrix)
}
#Generate Scenarios- This function generates a collection of adjacency matrices, xVec, bVec, LambdaVec and CostVec within a given range.
#Note. The matrix will be connected.
GenerateTestScenarios<-function(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#Generating the Matrix
NumberOfNodes=sample(MinNumNodes:MaxNumNodes,size=1)
NumberOfEdges=sample((NumberOfNodes-1):((NumberOfNodes-1)*NumberOfNodes/2),size=1)
AdjacencyMatrix=GenerateAdjConnectedMatrix(NumberOfNodes,NumberOfEdges)
n=NumberOfNodes
#Generate the xvec,bvec,lambdavec,costvec
xVec=runif(n,min=MinAttackTime,max=MaxAttackTime)
bVec=runif(n,min=MinObservedSize,max=MaxObservedSize)
LambdaVec=runif(n,min=MinArrivalRate,max=MaxArrivalRate)
CostVec=runif(n,min=MinCost,max=MaxCost)
return(list(AdjacencyMatrix=AdjacencyMatrix,xVec=xVec,bVec=bVec,LambdaVec=LambdaVec,CostVec=CostVec))
}
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=BestHeuristics
ScenarioRecording[[cenarioNumber,3]]=Scenario
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[[cenarioNumber,3]]=Scenario
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[[ScenarioNumber,3]]=Scenario
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[ScenarioNumber,3]=Scenario
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[[[ScenarioNumber,3]]]=Scenario
}
return(ScenarioRecording)
}
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[[[ScenarioNumber,3]]]=Scenario
}
return(ScenarioRecording)
}
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[ScenarioNumber,3]=Scenario
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
#ScenarioRecording[ScenarioNumber,3]=Scenario
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
#ScenarioRecording[ScenarioNumber,3]=Scenario
print(Scenario)
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[ScenarioNumber,3]=list(Scenario)
#print(Scenario)
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[[ScenarioNumber,3]]=list(Scenario)
#print(Scenario)
}
return(ScenarioRecording)
}
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[[ScenarioNumber,3]]=list(Scenario)
#print(Scenario)
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[[ScenarioNumber,3]]=list(AdjacencyMatrix,xVec,bVec,LambdaVec,CostVec)
#print(Scenario)
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=3)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[ScenarioNumber,3]=list(AdjacencyMatrix,xVec,bVec,LambdaVec,CostVec)
#print(Scenario)
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=7)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[ScenarioNumber,3]=list(AdjacencyMatrix)
ScenarioRecording[ScenarioNumber,4]=list(xVec)
ScenarioRecording[ScenarioNumber,5]=list(bVec)
ScenarioRecording[ScenarioNumber,6]=list(LambdaVec)
ScenarioRecording[ScenarioNumber,7]=list(CostVec)
#print(Scenario)
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(0,nrow=NumberOfScenarios,ncol=7)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[ScenarioNumber,1]=MinError
ScenarioRecording[ScenarioNumber,2]=list(BestHeuristics)
ScenarioRecording[[ScenarioNumber,3]]=list(AdjacencyMatrix)
ScenarioRecording[ScenarioNumber,4]=list(xVec)
ScenarioRecording[ScenarioNumber,5]=list(bVec)
ScenarioRecording[ScenarioNumber,6]=list(LambdaVec)
ScenarioRecording[ScenarioNumber,7]=list(CostVec)
#print(Scenario)
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
#This function is going to run the test for multiple scenarios
RunTestForMultipleScenarios<-function(NumberOfScenarios,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration,
MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
{
#This  matrix  stores the minerror,the best heuristic and the scenario
ScenarioRecording=matrix(list(),nrow=NumberOfScenarios,ncol=7)
for(ScenarioNumber in 1:NumberOfScenarios)
{
#For each scenario we generate  the  scenario
Scenario=GenerateTestScenarios(MinNumNodes,MaxNumNodes,MinAttackTime,MaxAttackTime,MinObservedSize,MaxObservedSize,MinArrivalRate,MaxArrivalRate,MinCost,MaxCost)
AdjacencyMatrix=Scenario$AdjacencyMatrix
xVec=Scenario$xVec
bVec=Scenario$bVec
LambdaVec=Scenario$LambdaVec
CostVec=Scenario$CostVec
ScenarioTest=RunTestForMultipleHeuristics(AdjacencyMatrix,xVec,bVec,CostVec,LambdaVec,ListOfHeuristicFunctions,ListOfHeuristicDepths,ListOfIndexForNodeFunctions,MaxStepsForIteration)
BestHeuristics=ScenarioTest$BestHeuristics
MinError=ScenarioTest$MinError
print(BestHeuristics)
print(MinError)
ScenarioRecording[[ScenarioNumber,1]]=MinError
ScenarioRecording[[ScenarioNumber,2]]=BestHeuristics
ScenarioRecording[[ScenarioNumber,3]]=AdjacencyMatrix
ScenarioRecording[[ScenarioNumber,4]]=xVec
ScenarioRecording[[ScenarioNumber,5]]=bVec
ScenarioRecording[[ScenarioNumber,6]]=LambdaVec
ScenarioRecording[[ScenarioNumber,7]]=CostVec
#print(Scenario)
}
return(ScenarioRecording)
}
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)
RunTestForMultipleScenarios(1,ListOfHeuristics,ListOfDepths,ListOfIndices,100,4,4,1.3,1.3,1,1,1/4,1/4,1,1)[2]
