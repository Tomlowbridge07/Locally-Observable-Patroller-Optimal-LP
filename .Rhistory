return(Plot)
}
#Plot a group of heuristics
#Note the heuristic erros should be provided in a matrix of rows for each heuristic
PlotMultipleHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#First we look at how many graphs we are going to plot
NumHeuristics=nrow(HeuristicErrors)
XCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
YCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
#Now categorize the data
for(i in 1:NumHeuristics)
{
if(i==1)
{
#Initialize
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates=matrix(0,ncol=length(Categorized$NumberInEachCategory),nrow=NumHeuristics)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates[i,]=Categorized$NumberInEachCategory
XYCoordinates=data.frame(XCoordinates,YCoordinates[i,])
}
else
{
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates[i,]=Categorized$NumberInEachCategory
XYCoordinates<-cbind(XYCoordinates,YCoordinates[i,])
}
print(XYCoordinates)
}
#Now we plot the data
DataFrame<-XYCoordinates
print(DataFrame)
MeltedDataFrame<-melt(DataFrame)
print(MeltedDataFrame)
Plot<-ggplot(MeltedDataFrame,aes(x=value,y=value,color=variable),show.legend='True') + geom_point() +
geom_line()
print(Plot)
return(Plot)
}
PlotMultipleHeuristicErrorData(ErrorsByHeuristic[1:4,],100,100)
#Plot a single heuristic
PlotHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#We run the categorize to get the data to plot
Categorized=CategorizeHeuristicErrorData(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates=Categorized$NumberInEachCategory
DataFrame=data.frame(XCoordinates,YCoordinates)
Plot<-ggplot(DataFrame,show.legend='True') + geom_point(aes(x = XCoordinates, y = YCoordinates)) +
geom_line(aes(x = XCoordinates, y = YCoordinates))
print(Plot)
return(Plot)
}
#Plot a group of heuristics
#Note the heuristic erros should be provided in a matrix of rows for each heuristic
PlotMultipleHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#First we look at how many graphs we are going to plot
NumHeuristics=nrow(HeuristicErrors)
XCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
YCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
#Now categorize the data
for(i in 1:NumHeuristics)
{
if(i==1)
{
#Initialize
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates=matrix(0,ncol=length(Categorized$NumberInEachCategory),nrow=NumHeuristics)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates[i,]=Categorized$NumberInEachCategory
XYCoordinates=data.frame(XCoordinates,YCoordinates[i,])
}
else
{
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates[i,]=Categorized$NumberInEachCategory
XYCoordinates<-cbind(XYCoordinates,YCoordinates[i,])
}
print(XYCoordinates)
}
#Now we plot the data
DataFrame<-XYCoordinates
print(DataFrame)
MeltedDataFrame<-melt(DataFrame,id=XCoordinates)
print(MeltedDataFrame)
Plot<-ggplot(MeltedDataFrame,aes(x=value,y=value,color=variable),show.legend='True') + geom_point() +
geom_line()
print(Plot)
return(Plot)
}
PlotMultipleHeuristicErrorData(ErrorsByHeuristic[1:4,],100,100)
#Plot a single heuristic
PlotHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#We run the categorize to get the data to plot
Categorized=CategorizeHeuristicErrorData(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates=Categorized$NumberInEachCategory
DataFrame=data.frame(XCoordinates,YCoordinates)
Plot<-ggplot(DataFrame,show.legend='True') + geom_point(aes(x = XCoordinates, y = YCoordinates)) +
geom_line(aes(x = XCoordinates, y = YCoordinates))
print(Plot)
return(Plot)
}
#Plot a group of heuristics
#Note the heuristic erros should be provided in a matrix of rows for each heuristic
PlotMultipleHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#First we look at how many graphs we are going to plot
NumHeuristics=nrow(HeuristicErrors)
XCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
YCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
#Now categorize the data
for(i in 1:NumHeuristics)
{
if(i==1)
{
#Initialize
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates=matrix(0,ncol=length(Categorized$NumberInEachCategory),nrow=NumHeuristics)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates[i,]=Categorized$NumberInEachCategory
XYCoordinates=data.frame(XCoordinates,YCoordinates[i,])
}
else
{
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates[i,]=Categorized$NumberInEachCategory
XYCoordinates<-cbind(XYCoordinates,YCoordinates[i,])
}
print(XYCoordinates)
}
#Now we plot the data
DataFrame<-XYCoordinates
print(DataFrame)
MeltedDataFrame<-melt(DataFrame,id="XCoordinates")
print(MeltedDataFrame)
Plot<-ggplot(MeltedDataFrame,aes(x=value,y=value,color=variable),show.legend='True') + geom_point() +
geom_line()
print(Plot)
return(Plot)
}
PlotMultipleHeuristicErrorData(ErrorsByHeuristic[1:4,],100,100)
#Plot a single heuristic
PlotHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#We run the categorize to get the data to plot
Categorized=CategorizeHeuristicErrorData(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates=Categorized$NumberInEachCategory
DataFrame=data.frame(XCoordinates,YCoordinates)
Plot<-ggplot(DataFrame,show.legend='True') + geom_point(aes(x = XCoordinates, y = YCoordinates)) +
geom_line(aes(x = XCoordinates, y = YCoordinates))
print(Plot)
return(Plot)
}
#Plot a group of heuristics
#Note the heuristic erros should be provided in a matrix of rows for each heuristic
PlotMultipleHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#First we look at how many graphs we are going to plot
NumHeuristics=nrow(HeuristicErrors)
XCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
YCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
#Now categorize the data
for(i in 1:NumHeuristics)
{
if(i==1)
{
#Initialize
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates=matrix(0,ncol=length(Categorized$NumberInEachCategory),nrow=NumHeuristics)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates[i,]=Categorized$NumberInEachCategory
XYCoordinates=data.frame(XCoordinates,YCoordinates[i,])
}
else
{
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates[i,]=Categorized$NumberInEachCategory
XYCoordinates<-cbind(XYCoordinates,YCoordinates[i,])
}
print(XYCoordinates)
}
#Now we plot the data
DataFrame<-XYCoordinates
print(DataFrame)
MeltedDataFrame<-melt(DataFrame,id="XCoordinates")
print(MeltedDataFrame)
Plot<-ggplot(MeltedDataFrame,aes(x=XCoordinates,y=value,color=variable),show.legend='True') + geom_point() +
geom_line()
print(Plot)
return(Plot)
}
PlotMultipleHeuristicErrorData(ErrorsByHeuristic[1:4,],100,100)
#Plot a single heuristic
PlotHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#We run the categorize to get the data to plot
Categorized=CategorizeHeuristicErrorData(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates=Categorized$NumberInEachCategory
DataFrame=data.frame(XCoordinates,YCoordinates)
Plot<-ggplot(DataFrame,show.legend='True') + geom_point(aes(x = XCoordinates, y = YCoordinates)) +
geom_line(aes(x = XCoordinates, y = YCoordinates))
print(Plot)
return(Plot)
}
#Plot a group of heuristics
#Note the heuristic erros should be provided in a matrix of rows for each heuristic
PlotMultipleHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#First we look at how many graphs we are going to plot
NumHeuristics=nrow(HeuristicErrors)
XCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
YCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
#Now categorize the data
for(i in 1:NumHeuristics)
{
if(i==1)
{
#Initialize
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates=matrix(0,ncol=length(Categorized$NumberInEachCategory),nrow=NumHeuristics)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates[i,]=Categorized$NumberInEachCategory
XYCoordinates=data.frame(XCoordinates,YCoordinates[i,])
}
else
{
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates[i,]=Categorized$NumberInEachCategory
Ydataframecol<-data.frame(YCoordinates[i,])
names(Ydataframecol)=paste("YCoordinates",toString(i))
XYCoordinates<-cbind(XYCoordinates,YCoordinates[i,])
}
print(XYCoordinates)
}
#Now we plot the data
DataFrame<-XYCoordinates
print(DataFrame)
MeltedDataFrame<-melt(DataFrame,id="XCoordinates")
print(MeltedDataFrame)
Plot<-ggplot(MeltedDataFrame,aes(x=XCoordinates,y=value,color=variable),show.legend='True') + geom_point() +
geom_line()
print(Plot)
return(Plot)
}
PlotMultipleHeuristicErrorData(ErrorsByHeuristic[1:4,],100,100)
#Plot a single heuristic
PlotHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#We run the categorize to get the data to plot
Categorized=CategorizeHeuristicErrorData(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates=Categorized$NumberInEachCategory
DataFrame=data.frame(XCoordinates,YCoordinates)
Plot<-ggplot(DataFrame,show.legend='True') + geom_point(aes(x = XCoordinates, y = YCoordinates)) +
geom_line(aes(x = XCoordinates, y = YCoordinates))
print(Plot)
return(Plot)
}
#Plot a group of heuristics
#Note the heuristic erros should be provided in a matrix of rows for each heuristic
PlotMultipleHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#First we look at how many graphs we are going to plot
NumHeuristics=nrow(HeuristicErrors)
XCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
YCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
#Now categorize the data
for(i in 1:NumHeuristics)
{
if(i==1)
{
#Initialize
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates=matrix(0,ncol=length(Categorized$NumberInEachCategory),nrow=NumHeuristics)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates[i,]=Categorized$NumberInEachCategory
XYCoordinates=data.frame(XCoordinates,YCoordinates[i,])
}
else
{
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates[i,]=Categorized$NumberInEachCategory
Ydataframecol<-data.frame(YCoordinates[i,])
names(Ydataframecol)=paste("YCoordinates",toString(i))
XYCoordinates<-cbind(XYCoordinates,Ydataframecol)
}
print(XYCoordinates)
}
#Now we plot the data
DataFrame<-XYCoordinates
print(DataFrame)
MeltedDataFrame<-melt(DataFrame,id="XCoordinates")
print(MeltedDataFrame)
Plot<-ggplot(MeltedDataFrame,aes(x=XCoordinates,y=value,color=variable),show.legend='True') + geom_point() +
geom_line()
print(Plot)
return(Plot)
}
PlotMultipleHeuristicErrorData(ErrorsByHeuristic[1:4,],100,100)
#Plot a single heuristic
PlotHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#We run the categorize to get the data to plot
Categorized=CategorizeHeuristicErrorData(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates=Categorized$NumberInEachCategory
DataFrame=data.frame(XCoordinates,YCoordinates)
Plot<-ggplot(DataFrame,show.legend='True') + geom_point(aes(x = XCoordinates, y = YCoordinates)) +
geom_line(aes(x = XCoordinates, y = YCoordinates))
print(Plot)
return(Plot)
}
#Plot a group of heuristics
#Note the heuristic erros should be provided in a matrix of rows for each heuristic
PlotMultipleHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#First we look at how many graphs we are going to plot
NumHeuristics=nrow(HeuristicErrors)
XCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
YCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
#Now categorize the data
for(i in 1:NumHeuristics)
{
if(i==1)
{
#Initialize
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates=matrix(0,ncol=length(Categorized$NumberInEachCategory),nrow=NumHeuristics)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates[i,]=Categorized$NumberInEachCategory
XYCoordinates=data.frame(XCoordinates,YCoordinates[i,])
}
else
{
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates[i,]=Categorized$NumberInEachCategory
Ydataframecol<-data.frame(YCoordinates[i,])
names(Ydataframecol)=paste("YCoordinates",toString(i))
XYCoordinates<-cbind(XYCoordinates,Ydataframecol)
}
print(XYCoordinates)
}
#Now we plot the data
DataFrame<-XYCoordinates
print(DataFrame)
MeltedDataFrame<-melt(DataFrame,id="XCoordinates")
print(MeltedDataFrame)
Plot<-ggplot(MeltedDataFrame,aes(x=XCoordinates,y=value,color=variable),show.legend='True') + #geom_point()
+geom_line()
print(Plot)
return(Plot)
}
PlotMultipleHeuristicErrorData(ErrorsByHeuristic[1:4,],100,100)
#Plot a single heuristic
PlotHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#We run the categorize to get the data to plot
Categorized=CategorizeHeuristicErrorData(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates=Categorized$NumberInEachCategory
DataFrame=data.frame(XCoordinates,YCoordinates)
Plot<-ggplot(DataFrame,show.legend='True') + geom_point(aes(x = XCoordinates, y = YCoordinates)) +
geom_line(aes(x = XCoordinates, y = YCoordinates))
print(Plot)
return(Plot)
}
#Plot a group of heuristics
#Note the heuristic erros should be provided in a matrix of rows for each heuristic
PlotMultipleHeuristicErrorData<-function(HeuristicErrors,NumberOfCategories,MaxErrorCategory)
{
#First we look at how many graphs we are going to plot
NumHeuristics=nrow(HeuristicErrors)
XCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
YCoordinates=matrix(0,ncol=length(CategorizeHeuristicErrorData(HeuristicErrors[1,],NumberOfCategories,MaxErrorCategory)$NumberInEachCategory),nrow=NumHeuristics)
#Now categorize the data
for(i in 1:NumHeuristics)
{
if(i==1)
{
#Initialize
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates=matrix(0,ncol=length(Categorized$NumberInEachCategory),nrow=NumHeuristics)
XCoordinates=Categorized$CategoryMidPoints
YCoordinates[i,]=Categorized$NumberInEachCategory
XYCoordinates=data.frame(XCoordinates,YCoordinates[i,])
}
else
{
Categorized=CategorizeHeuristicErrorData(HeuristicErrors[i,],NumberOfCategories,MaxErrorCategory)
YCoordinates[i,]=Categorized$NumberInEachCategory
Ydataframecol<-data.frame(YCoordinates[i,])
names(Ydataframecol)=paste("YCoordinates",toString(i))
XYCoordinates<-cbind(XYCoordinates,Ydataframecol)
}
print(XYCoordinates)
}
#Now we plot the data
DataFrame<-XYCoordinates
print(DataFrame)
MeltedDataFrame<-melt(DataFrame,id="XCoordinates")
print(MeltedDataFrame)
Plot<-ggplot(MeltedDataFrame,aes(x=XCoordinates,y=value,color=variable),show.legend='True') + #geom_point()+
geom_line()
print(Plot)
return(Plot)
}
PlotMultipleHeuristicErrorData(ErrorsByHeuristic[1:4,],100,100)
PlotMultipleHeuristicErrorData(ErrorsByHeuristic[c(3,5),],100,100)
OldPlainIndexForNode<-function(s,v,Cost,Lambda,b,x,v)
{
#First calculate B
B=ceiling(x)
stopifnot(s <= (B+1))
stopifnot(v <= (b+1))
# print(s)
# print(v)
# print(vMax)
if(s < B)
{
return(0)
}
else if(s==B && v < (vMax+1))
{
return(Delta(tilde = FALSE,Cost,Lambda,b,x,v,vMax))
}
else if(s==B && v >= (vMax+1))
{
return(Delta(tilde = TRUE,Cost,Lambda,b,x,v,vMax))
}
else if(s==(B+1) && v < (vMax))
{
return(Delta(tilde = TRUE,Cost,Lambda,b,x,v+1,vMax))
}
else if(s==(B+1) && v >= (vMax))
{
return(Delta(tilde = TRUE,Cost,Lambda,b,x,v+1,vMax))
}
else
{
print("Error")
}
}
OldPlainIndexForNode<-function(s,v,Cost,Lambda,b,x,vMax)
{
#First calculate B
B=ceiling(x)
stopifnot(s <= (B+1))
stopifnot(v <= (b+1))
# print(s)
# print(v)
# print(vMax)
if(s < B)
{
return(0)
}
else if(s==B && v < (vMax+1))
{
return(Delta(tilde = FALSE,Cost,Lambda,b,x,v,vMax))
}
else if(s==B && v >= (vMax+1))
{
return(Delta(tilde = TRUE,Cost,Lambda,b,x,v,vMax))
}
else if(s==(B+1) && v < (vMax))
{
return(Delta(tilde = TRUE,Cost,Lambda,b,x,v+1,vMax))
}
else if(s==(B+1) && v >= (vMax))
{
return(Delta(tilde = TRUE,Cost,Lambda,b,x,v+1,vMax))
}
else
{
print("Error")
}
}
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(2,4),rep(1,4),rep(1/4,4),MultiStepBenefitHeuristic,3,OldPlainIndexForNode,300)
library(gtools)
library(utils)
library(lpSolve)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(2,4),rep(1,4),rep(1/4,4),MultiStepBenefitHeuristic,3,OldPlainIndexForNode,300)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(2,4),rep(1,4),rep(1/4,4),MultiStepBenefitHeuristic,3,PlainIndexForNode,300)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(2,4),rep(1,4),rep(1/4,4),MultiStepPenaltyHeuristic,3,OldPlainIndexForNode,300)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(2,4),rep(1,4),rep(1/4,4),MultiStepPenaltyHeuristic,3,PlainIndexForNode,300)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(0,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,3,PlainIndexForNode,300)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(0,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,3,PlainIndexForNode,300,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(0,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,3,PlainIndexForNode,500,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(0,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,3,PlainIndexForNode,500,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(2,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,3,PlainIndexForNode,500,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(1,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,3,PlainIndexForNode,500,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(1,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,3,PlainIndexForNode,1-00,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(2,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,3,PlainIndexForNode,1000,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(2,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,1,PlainIndexForNode,1000,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(1,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,1,PlainIndexForNode,1000,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(1,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,2,PlainIndexForNode,1000,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(1,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,3,PlainIndexForNode,1000,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(1,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,4,PlainIndexForNode,1000,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(1,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,2,PlainIndexForNode,1000,PrintOutput = T)
OldIndexTest=RunTest(matrix(rep(1,16),nrow=4),c(1.2,1.8,2.2,2.8),rep(1,4),rep(1,4),c(0.2,0.5,0.1,0.2),MultiStepPenaltyHeuristic,2,PlainIndexForNode,3000,PrintOutput = T)
DataForReport=RunTestForMultipleScenariosCompleteGraphs(100,list(MultiStepPenaltyHeuristic),c(1,2,3),list(OldPlainIndexForNode,PlainIndexForNode),400,4,c(1,1,1,1),c(3,3,3,3),c(1,1,1,1),c(1,1,1,1),c(2,2,2,2),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
DataForReport=RunTestForMultipleScenariosCompleteGraphs(100,list(MultiStepPenaltyHeuristic),c(1,2,3),list(OldPlainIndexForNode,PlainIndexForNode),400,4,c(1,1,1,1),c(3,3,3,3),c(1,1,1,1),c(2,2,2,2),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
DataForReport=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepPenaltyHeuristic),c(1,2,3),list(OldPlainIndexForNode,PlainIndexForNode),400,4,c(1,1,1,1),c(3,3,3,3),c(1,1,1,1),c(2,2,2,2),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
DataForReport=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepPenaltyHeuristic),c(1,2,3),list(OldPlainIndexForNode,PlainIndexForNode),50,4,c(1,1,1,1),c(3,3,3,3),c(1,1,1,1),c(2,2,2,2),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
DataForReport=RunTestForMultipleScenariosCompleteGraphs(1,list(MultiStepPenaltyHeuristic),c(1,2,3),list(OldPlainIndexForNode,PlainIndexForNode),50,4,c(1,1,1,1),c(3,3,3,3),c(1,1,1,1),c(1,1,1,1),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
DataForReport=RunTestForMultipleScenariosCompleteGraphs(100,list(MultiStepPenaltyHeuristic),c(1,2,3),list(OldPlainIndexForNode,PlainIndexForNode),50,4,c(1,1,1,1),c(3,3,3,3),c(1,1,1,1),c(1,1,1,1),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
DataForReport=RunTestForMultipleScenariosCompleteGraphs(100,list(MultiStepPenaltyHeuristic),c(1,2,3),list(OldPlainIndexForNode,PlainIndexForNode),300,4,c(1,1,1,1),c(3,3,3,3),c(1,1,1,1),c(1,1,1,1),c(0,0,0,0),c(1,1,1,1),c(1,1,1,1),c(1,1,1,1))
