}
#This function is desinged to take in the FullInfoMatrix and compare its decisions to actions from some policy
CompareSimulationInfoToPolicy<-function(FullInfo,ActionPolicy,StateSpace,BVec)
{
AgreeAtStep=vector(length=nrow(FullInfo))
for(i in 1:nrow(FullInfo))
{
#For each step we now compare the decision to the policy
CurrentState=FullInfo[[i,1]]
Decision=FullInfo[[i,2]]
l=length(CurrentState)
n=l/2
#Note here we retain the information for the observed when in state B+1, we will now remove this
for(j in 1:n)
{
if(CurrentState[j]==(BVec[j]+1))
{
CurrentState[j+n]=0
}
}
CurrentStateID=IdenityRow(CurrentState,StateSpace)
PolicyDecision=ActionPolicy[CurrentStateID]
print(paste("Our Decision at state ",toString(CurrentState)))
print(paste("Proposed by simulation is: ",toString(Decision)," and policy suggests: ",toString(PolicyDecision)))
if(Decision==PolicyDecision)
{
AgreeAtStep[i]=1
}
else
{
AgreeAtStep[i]=0
}
}
return(AgreeAtStep)
}
SimulationExperiment<-function(NumberOfTrials,NumberOfRunSteps,HeuristicDepth,HeuristicFunction,n,AdjacencyMatrix,IndexForNodeFunction,CostVec,LambdaVec,bVec,xVec,vMaxVec=NULL)
{
#We repeat the simulation
RunningCostMatrix=matrix(0,nrow = 0,ncol=NumberOfRunSteps)
AveragecostVec=vector(length=NumberOfTrials)
for(trial in 1:NumberOfTrials)
{
Simulation=SimulationForEvolution(NumberOfRunSteps,HeuristicDepth,HeuristicFunction,n,AdjacencyMatrix,IndexForNodeFunction,CostVec,LambdaVec,bVec,xVec)
RunningCostMatrix=rbind(RunningCostMatrix,Simulation$CostForStep)
AveragecostVec[trial]=Simulation$Average
#print(RunningCostMatrix)
}
AverageAmongSimulations=sum(AveragecostVec)/NumberOfTrials
return(AverageAmongSimulations)
}
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(100,2,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
MultiStepBenefitHeuristic(2,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,c(3,1,2),c(0,0,1),rep(1,3),rep(1/3,3),rep(1,3),c(1.2,1.8,2.2))
MultiStepBenefitHeuristic(2,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,c(3,1,2),c(0,0,1),rep(1,3),rep(1/3,3),rep(1,3),c(1.2,1.8,2.2))
MultiStepBenefitHeuristic(2,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,c(3,1,2),c(0,0,1),rep(1,3),rep(1/3,3),rep(1,3),c(1.2,1.8,2.2))
MultiStepBenefitHeuristic(2,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,c(3,1,2),c(0,1,1),rep(1,3),rep(1/3,3),rep(1,3),c(1.2,1.8,2.2))
MultiStepBenefitHeuristic(1,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,c(3,1,2),c(0,1,1),rep(1,3),rep(1/3,3),rep(1,3),c(1.2,1.8,2.2))
FullInfo=SimulationForEvolution(100,2,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(100,1,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(100,1,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
FullInfo=SimulationForEvolution(100,1,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
FullInfo=SimulationForEvolution(100,1,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
FullInfo=SimulationForEvolution(100,1,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
FullInfo=SimulationForEvolution(100,1,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
FullInfo=SimulationForEvolution(100,1,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
FullInfo=SimulationForEvolution(100,2,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
FullInfo=SimulationForEvolution(100,2,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(100,1,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),EqualStepIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(100,1,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
#This function is desinged to take in the FullInfoMatrix and compare its decisions to actions from some policy
CompareSimulationInfoToPolicy<-function(FullInfo,ActionPolicy,StateSpace,BVec)
{
AgreeAtStep=vector(length=nrow(FullInfo))
for(i in 1:nrow(FullInfo))
{
#For each step we now compare the decision to the policy
CurrentState=FullInfo[[i,1]]
Decision=FullInfo[[i,2]]
l=length(CurrentState)
n=l/2
#Note here we retain the information for the observed when in state B+1, we will now remove this
for(j in 1:n)
{
if(CurrentState[j]==(BVec[j]+1))
{
CurrentState[j+n]=0
}
}
CurrentStateID=IdenityRow(CurrentState,StateSpace)
PolicyDecision=ActionPolicy[CurrentStateID]
print(paste("Our Decision at state ",toString(CurrentState)))
print(paste("Proposed by simulation is: ",toString(Decision)," and policy suggests: ",toString(PolicyDecision)))
if(Decision==PolicyDecision)
{
AgreeAtStep[i]=1
}
else
{
AgreeAtStep[i]=0
}
}
#Disagree stores which we disagree at
DisagreeAt=which(AgreeAtStep==0)
print("The Policys disagree at the following")
for(i in 1:length(DisagreeAt))
{
print(paste("Step: ",toString(DisagreeAt[i]),", State: ",toString(FullInfo[[DisagreeAt[i],1]])))
print(paste("Decisions made where, Index proposes: ",toString(FullInfo[[DisagreeAt[i],2]]))," but policy suggests: ",toString(ActionPolicy[IdenityRow(FullInfo[[DisagreeAt[i],1]],StateSpace)]))
}
return(AgreeAtStep)
}
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
#This function is desinged to take in the FullInfoMatrix and compare its decisions to actions from some policy
CompareSimulationInfoToPolicy<-function(FullInfo,ActionPolicy,StateSpace,BVec)
{
AgreeAtStep=vector(length=nrow(FullInfo))
for(i in 1:nrow(FullInfo))
{
#For each step we now compare the decision to the policy
CurrentState=FullInfo[[i,1]]
Decision=FullInfo[[i,2]]
l=length(CurrentState)
n=l/2
#Note here we retain the information for the observed when in state B+1, we will now remove this
for(j in 1:n)
{
if(CurrentState[j]==(BVec[j]+1))
{
CurrentState[j+n]=0
}
}
CurrentStateID=IdenityRow(CurrentState,StateSpace)
PolicyDecision=ActionPolicy[CurrentStateID]
print(paste("Our Decision at state ",toString(CurrentState)))
print(paste("Proposed by simulation is: ",toString(Decision)," and policy suggests: ",toString(PolicyDecision)))
if(Decision==PolicyDecision)
{
AgreeAtStep[i]=1
}
else
{
AgreeAtStep[i]=0
}
}
#Disagree stores which we disagree at
DisagreeAt=which(AgreeAtStep==0)
print(rep("-",30))
print("The Policys disagree at the following")
for(i in 1:length(DisagreeAt))
{
print(paste("Step: ",toString(DisagreeAt[i]),", State: ",toString(FullInfo[[DisagreeAt[i],1]])))
print(paste("Decisions made where, Index proposes: ",toString(FullInfo[[DisagreeAt[i],2]]))," but policy suggests: ",toString(ActionPolicy[IdenityRow(FullInfo[[DisagreeAt[i],1]],StateSpace)]))
}
return(AgreeAtStep)
}
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
#This function is desinged to take in the FullInfoMatrix and compare its decisions to actions from some policy
CompareSimulationInfoToPolicy<-function(FullInfo,ActionPolicy,StateSpace,BVec)
{
AgreeAtStep=vector(length=nrow(FullInfo))
for(i in 1:nrow(FullInfo))
{
#For each step we now compare the decision to the policy
CurrentState=FullInfo[[i,1]]
Decision=FullInfo[[i,2]]
l=length(CurrentState)
n=l/2
#Note here we retain the information for the observed when in state B+1, we will now remove this
for(j in 1:n)
{
if(CurrentState[j]==(BVec[j]+1))
{
CurrentState[j+n]=0
}
}
CurrentStateID=IdenityRow(CurrentState,StateSpace)
PolicyDecision=ActionPolicy[CurrentStateID]
print(paste("Our Decision at state ",toString(CurrentState)))
print(paste("Proposed by simulation is: ",toString(Decision)," and policy suggests: ",toString(PolicyDecision)))
if(Decision==PolicyDecision)
{
AgreeAtStep[i]=1
}
else
{
AgreeAtStep[i]=0
}
}
#Disagree stores which we disagree at
DisagreeAt=which(AgreeAtStep==0)
print(rep(-,30))
print("The Policys disagree at the following")
for(i in 1:length(DisagreeAt))
{
print(paste("Step: ",toString(DisagreeAt[i]),", State: ",toString(FullInfo[[DisagreeAt[i],1]])))
print(paste("Decisions made where, Index proposes: ",toString(FullInfo[[DisagreeAt[i],2]]))," but policy suggests: ",toString(ActionPolicy[IdenityRow(FullInfo[[DisagreeAt[i],1]],StateSpace)]))
}
return(AgreeAtStep)
}
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
#This function is desinged to take in the FullInfoMatrix and compare its decisions to actions from some policy
CompareSimulationInfoToPolicy<-function(FullInfo,ActionPolicy,StateSpace,BVec)
{
AgreeAtStep=vector(length=nrow(FullInfo))
for(i in 1:nrow(FullInfo))
{
#For each step we now compare the decision to the policy
CurrentState=FullInfo[[i,1]]
Decision=FullInfo[[i,2]]
l=length(CurrentState)
n=l/2
#Note here we retain the information for the observed when in state B+1, we will now remove this
for(j in 1:n)
{
if(CurrentState[j]==(BVec[j]+1))
{
CurrentState[j+n]=0
}
}
CurrentStateID=IdenityRow(CurrentState,StateSpace)
PolicyDecision=ActionPolicy[CurrentStateID]
print(paste("Our Decision at state ",toString(CurrentState)))
print(paste("Proposed by simulation is: ",toString(Decision)," and policy suggests: ",toString(PolicyDecision)))
if(Decision==PolicyDecision)
{
AgreeAtStep[i]=1
}
else
{
AgreeAtStep[i]=0
}
}
#Disagree stores which we disagree at
DisagreeAt=which(AgreeAtStep==0)
print(rep( ,30))
print("The Policys disagree at the following")
for(i in 1:length(DisagreeAt))
{
print(paste("Step: ",toString(DisagreeAt[i]),", State: ",toString(FullInfo[[DisagreeAt[i],1]])))
print(paste("Decisions made where, Index proposes: ",toString(FullInfo[[DisagreeAt[i],2]]))," but policy suggests: ",toString(ActionPolicy[IdenityRow(FullInfo[[DisagreeAt[i],1]],StateSpace)]))
}
return(AgreeAtStep)
}
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
#This function is desinged to take in the FullInfoMatrix and compare its decisions to actions from some policy
CompareSimulationInfoToPolicy<-function(FullInfo,ActionPolicy,StateSpace,BVec)
{
AgreeAtStep=vector(length=nrow(FullInfo))
for(i in 1:nrow(FullInfo))
{
#For each step we now compare the decision to the policy
CurrentState=FullInfo[[i,1]]
Decision=FullInfo[[i,2]]
l=length(CurrentState)
n=l/2
#Note here we retain the information for the observed when in state B+1, we will now remove this
for(j in 1:n)
{
if(CurrentState[j]==(BVec[j]+1))
{
CurrentState[j+n]=0
}
}
CurrentStateID=IdenityRow(CurrentState,StateSpace)
PolicyDecision=ActionPolicy[CurrentStateID]
print(paste("Our Decision at state ",toString(CurrentState)))
print(paste("Proposed by simulation is: ",toString(Decision)," and policy suggests: ",toString(PolicyDecision)))
if(Decision==PolicyDecision)
{
AgreeAtStep[i]=1
}
else
{
AgreeAtStep[i]=0
}
}
#Disagree stores which we disagree at
DisagreeAt=which(AgreeAtStep==0)
print("The Policys disagree at the following")
for(i in 1:length(DisagreeAt))
{
print(paste("Step: ",toString(DisagreeAt[i]),", State: ",toString(FullInfo[[DisagreeAt[i],1]])))
print(paste("Decisions made where, Index proposes: ",toString(FullInfo[[DisagreeAt[i],2]]))," but policy suggests: ",toString(ActionPolicy[IdenityRow(FullInfo[[DisagreeAt[i],1]],StateSpace)]))
}
return(AgreeAtStep)
}
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
#This function is desinged to take in the FullInfoMatrix and compare its decisions to actions from some policy
CompareSimulationInfoToPolicy<-function(FullInfo,ActionPolicy,StateSpace,BVec)
{
AgreeAtStep=vector(length=nrow(FullInfo))
for(i in 1:nrow(FullInfo))
{
#For each step we now compare the decision to the policy
CurrentState=FullInfo[[i,1]]
Decision=FullInfo[[i,2]]
l=length(CurrentState)
n=l/2
#Note here we retain the information for the observed when in state B+1, we will now remove this
for(j in 1:n)
{
if(CurrentState[j]==(BVec[j]+1))
{
CurrentState[j+n]=0
}
}
CurrentStateID=IdenityRow(CurrentState,StateSpace)
PolicyDecision=ActionPolicy[CurrentStateID]
print(paste("Our Decision at state ",toString(CurrentState)))
print(paste("Proposed by simulation is: ",toString(Decision)," and policy suggests: ",toString(PolicyDecision)))
if(Decision==PolicyDecision)
{
AgreeAtStep[i]=1
}
else
{
AgreeAtStep[i]=0
}
}
#Disagree stores which we disagree at
DisagreeAt=which(AgreeAtStep==0)
print(DisagreeAt)
print("The Policys disagree at the following")
for(i in 1:length(DisagreeAt))
{
print(paste("Step: ",toString(DisagreeAt[i]),", State: ",toString(FullInfo[[DisagreeAt[i],1]])))
print(paste("Decisions made where, Index proposes: ",toString(FullInfo[[DisagreeAt[i],2]]))," but policy suggests: ",toString(ActionPolicy[IdenityRow(FullInfo[[DisagreeAt[i],1]],StateSpace)]))
}
return(AgreeAtStep)
}
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
#This function is desinged to take in the FullInfoMatrix and compare its decisions to actions from some policy
CompareSimulationInfoToPolicy<-function(FullInfo,ActionPolicy,StateSpace,BVec)
{
AgreeAtStep=vector(length=nrow(FullInfo))
for(i in 1:nrow(FullInfo))
{
#For each step we now compare the decision to the policy
CurrentState=FullInfo[[i,1]]
Decision=FullInfo[[i,2]]
l=length(CurrentState)
n=l/2
#Note here we retain the information for the observed when in state B+1, we will now remove this
for(j in 1:n)
{
if(CurrentState[j]==(BVec[j]+1))
{
CurrentState[j+n]=0
}
}
CurrentStateID=IdenityRow(CurrentState,StateSpace)
PolicyDecision=ActionPolicy[CurrentStateID]
print(paste("Our Decision at state ",toString(CurrentState)))
print(paste("Proposed by simulation is: ",toString(Decision)," and policy suggests: ",toString(PolicyDecision)))
if(Decision==PolicyDecision)
{
AgreeAtStep[i]=1
}
else
{
AgreeAtStep[i]=0
}
}
#Disagree stores which we disagree at
DisagreeAt=which(AgreeAtStep==0)
print(DisagreeAt)
print("The Policys disagree at the following")
for(i in 1:length(DisagreeAt))
{
print(paste("Step: ",toString(DisagreeAt[i]),", State: ",toString(FullInfo[[DisagreeAt[i],1]])))
print(paste("Decisions made where, Index proposes: ",toString(FullInfo[[DisagreeAt[i],2]])," but policy suggests: ",toString(ActionPolicy[IdenityRow(FullInfo[[DisagreeAt[i],1]],StateSpace)])))
}
return(AgreeAtStep)
}
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(100,1,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
PolicyByDual
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
StateSpace
PolicyByDual
TruncPoissionMean(1/3,2)
FullInfo=SimulationForEvolution(100,1,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2),Scenario)$FullInfoMatrix
FullInfo=SimulationForEvolution(100,1,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2),Scenario)$FullInfoMatrix
View(Scenario)
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(100,2,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2),Scenario)$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(100,2,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2),Scenario)$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
#This function is desinged to take in the FullInfoMatrix and compare its decisions to actions from some policy
CompareSimulationInfoToPolicy<-function(FullInfo,ActionPolicy,StateSpace,BVec)
{
AgreeAtStep=vector(length=nrow(FullInfo))
for(i in 1:nrow(FullInfo))
{
#For each step we now compare the decision to the policy
CurrentState=FullInfo[[i,1]]
Decision=FullInfo[[i,2]]
l=length(CurrentState)
n=l/2
#Note here we retain the information for the observed when in state B+1, we will now remove this
for(j in 1:n)
{
if(CurrentState[j]==(BVec[j]+1))
{
CurrentState[j+n]=0
}
}
CurrentStateID=IdenityRow(CurrentState,StateSpace)
PolicyDecision=ActionPolicy[CurrentStateID]
print(paste("Our Decision at state ",toString(CurrentState)))
print(paste("Proposed by simulation is: ",toString(Decision)," and policy suggests: ",toString(PolicyDecision)))
if(Decision==PolicyDecision)
{
AgreeAtStep[i]=1
}
else
{
AgreeAtStep[i]=0
}
}
#Disagree stores which we disagree at
DisagreeAt=which(AgreeAtStep==0)
print(DisagreeAt)
print("The Policys disagree at the following")
if(length(DisagreeAt)!=0)
{
for(i in 1:length(DisagreeAt))
{
print(paste("Step: ",toString(DisagreeAt[i]),", State: ",toString(FullInfo[[DisagreeAt[i],1]])))
print(paste("Decisions made where, Index proposes: ",toString(FullInfo[[DisagreeAt[i],2]])," but policy suggests: ",toString(ActionPolicy[IdenityRow(FullInfo[[DisagreeAt[i],1]],StateSpace)])))
}
}
return(AgreeAtStep)
}
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
#This function is desinged to take in the FullInfoMatrix and compare its decisions to actions from some policy
CompareSimulationInfoToPolicy<-function(FullInfo,ActionPolicy,StateSpace,BVec)
{
AgreeAtStep=vector(length=nrow(FullInfo))
for(i in 1:nrow(FullInfo))
{
#For each step we now compare the decision to the policy
CurrentState=FullInfo[[i,1]]
Decision=FullInfo[[i,2]]
l=length(CurrentState)
n=l/2
#Note here we retain the information for the observed when in state B+1, we will now remove this
for(j in 1:n)
{
if(CurrentState[j]==(BVec[j]+1))
{
CurrentState[j+n]=0
}
}
CurrentStateID=IdenityRow(CurrentState,StateSpace)
PolicyDecision=ActionPolicy[CurrentStateID]
print(paste("Our Decision at state ",toString(CurrentState)))
print(paste("Proposed by simulation is: ",toString(Decision)," and policy suggests: ",toString(PolicyDecision)))
if(Decision==PolicyDecision)
{
AgreeAtStep[i]=1
}
else
{
AgreeAtStep[i]=0
}
}
#Disagree stores which we disagree at
DisagreeAt=which(AgreeAtStep==0)
print("The Policys disagree at the following")
if(length(DisagreeAt)!=0)
{
for(i in 1:length(DisagreeAt))
{
print(paste("Step: ",toString(DisagreeAt[i]),", State: ",toString(FullInfo[[DisagreeAt[i],1]])))
print(paste("Decisions made where, Index proposes: ",toString(FullInfo[[DisagreeAt[i],2]])," but policy suggests: ",toString(ActionPolicy[IdenityRow(FullInfo[[DisagreeAt[i],1]],StateSpace)])))
}
}
return(AgreeAtStep)
}
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
Scenario=CreateSimulationScenario(100,3,rep(1/3,3))
FullInfo=SimulationForEvolution(100,2,MultiStepBenefitHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2),Scenario)$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
MultiStepBenefitHeuristic(2,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,c(1,2,3),c(0,1,1),rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))
MultiStepBenefitHeuristic(2,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,c(3,1,2),c(0,1,1),rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2))
FullInfo=SimulationForEvolution(100,2,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2),Scenario)$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(100,3,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2),Scenario)$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(100,4,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2),Scenario)$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(100,1,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2),Scenario)$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(1000,1,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2),Scenario)$FullInfoMatrix
Scenario=CreateSimulationScenario(1000,3,rep(1/3,3))
FullInfo=SimulationForEvolution(1000,1,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2),Scenario)$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
FullInfo=SimulationForEvolution(100,2,MultiStepPenaltyHeuristic,3,matrix(rep(1,9),nrow=3),PlainIndexForNode,rep(1,3),rep(1/3,3),rep(2,3),c(1.2,1.8,2.2),Scenario)$FullInfoMatrix
CompareSimulationInfoToPolicy(FullInfo,PolicyByDual,StateSpace,c(2,2,3))
